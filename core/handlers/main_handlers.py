from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.db.models import Budgets, TransactionsType
from core.db.queries import (AsyncQueryCategory, AsyncQueryTransactions,
                             AsyncQueryUser, AsyncQueryBudgets,AsyncQueryJoin)
from core.states.states import TransactionsForm, BudgetsForm
from core.keyboards.reply import management, reply_keyboard_builder_category, settings_reply_Keyboard
from core.keyboards.inline import inline_back_transaction, inline_back_limite


import datetime

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    await message.answer(
        "ü§ë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –ø–æ–º–æ–≥—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –±—é–¥–∂–µ—Ç–æ–º, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Ç—Å—Ä–∏—Ä—É–π—Ç–µ—Å—å /registration",
        reply_markup=management,
    )

# -------------------------------–î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –î–û–•–û–î–û–í –ò –†–ê–°–•–û–î–û–í-------------------------------------


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã üìà")
async def add_expenses(message: Message, state: FSMContext) -> None:
    if await AsyncQueryUser.is_user(message.from_user.id):
        await state.set_state(TransactionsForm.category)
        await state.update_data(type=TransactionsType.expenses)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ üìà",
            reply_markup=await reply_keyboard_builder_category(
                TransactionsType.expenses
            ),
        )
        await message.answer('‚Ü© –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', reply_markup=inline_back_transaction)
    else:
        await message.answer("–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /registration")


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã üìâ")
async def add_income(message: Message, state: FSMContext) -> None:

    if await AsyncQueryUser.is_user(message.from_user.id):
        await state.update_data(type=TransactionsType.income)
        await state.set_state(TransactionsForm.category)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤ üìâ",
            reply_markup=await reply_keyboard_builder_category(TransactionsType.income),
        )
        await message.answer('‚Ü© –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', reply_markup=inline_back_transaction)
    else:
        await message.answer("–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /registration")


@router.message(TransactionsForm.category)
async def form_category(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    category_get = await AsyncQueryCategory.get_category_title_and_type(message.text, data['type'])
    if not category_get:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚ùó")
    else:
        await state.update_data(category=message.text)
        await state.set_state(TransactionsForm.amount)
        await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ ‚Ü© –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥", reply_markup=inline_back_transaction)


@router.message(TransactionsForm.amount)
async def form_amount(message: Message, state: FSMContext) -> None:
    if message.text.isdigit():
        await state.update_data(amount=message.text)
        data = await state.get_data()
        await state.clear()
        if data['type'] == TransactionsType.income:
            category = await AsyncQueryCategory.get_category_title_and_type(
                data["category"], TransactionsType.income
            )
        else:
            category = await AsyncQueryCategory.get_category_title_and_type(
                data["category"], TransactionsType.expenses
            )
        user_tg_id = message.from_user.id
        user = await AsyncQueryUser.get_user(user_tg_id)
        try:
            await AsyncQueryTransactions.create_transactions(
                int(data["amount"]),
                category.id,
                user.id,
            )
            message_text = "–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∑–∞–ø–∏—Å–∞–Ω—ã üíµ" if data['type'] == 'income' else "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞–ø–∏—Å–∞–Ω—ã üíµ"

            await message.answer(message_text, reply_markup=management)

        except:
            await message.answer(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ üòî",
                reply_markup=management,
            )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑‚ùó")

# ------------------------------------------–£–°–¢–ê–ù–û–í–ö–ê –õ–Æ–ú–ò–¢–ê---------------------------------------------------------------------


@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
async def settings(message: Message) -> None:
    if await AsyncQueryUser.is_user(message.from_user.id):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Üì", reply_markup=settings_reply_Keyboard)
        await message.answer('‚Ü© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=inline_back_limite)
    else:
        await message.answer("–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /registration")


@router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–º–∏—Ç üö´')
async def settings(message: Message, state: FSMContext) -> None:
    await state.set_state(BudgetsForm.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üìà", reply_markup=await reply_keyboard_builder_category(TransactionsType.expenses))
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', reply_markup=inline_back_limite)


@router.message(BudgetsForm.category)
async def form_category(message: Message, state: FSMContext) -> None:
    category_get = await AsyncQueryCategory.get_category_title_and_type(message.text, TransactionsType.expenses)
    if not category_get:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚ùó")
    else:
        user_tg_id = message.from_user.id
        user = await AsyncQueryUser.get_user(user_tg_id)
        year = datetime.datetime.now().year
        month = datetime.datetime.now().month

        if not await AsyncQueryBudgets.get_budgets(user.id, category_get.id, month, year):
            await state.update_data(category=message.text)
            await state.set_state(BudgetsForm.limit)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ª—é–º–∏—Ç–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã -> '{message.text} –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥'", reply_markup=inline_back_limite)
        else:
            await message.reply("–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª—é–º–∏—Ç –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")


@router.message(BudgetsForm.limit)
async def form_amount(message: Message, state: FSMContext) -> None:
    if message.text.isdigit():
        await state.update_data(limit=message.text)
        data = await state.get_data()
        await state.clear()
        category = await AsyncQueryCategory.get_category_title_and_type(data['category'], TransactionsType.expenses)
        user_tg_id = message.from_user.id
        user = await AsyncQueryUser.get_user(user_tg_id)
        year = datetime.datetime.now().year
        month = datetime.datetime.now().month
        await AsyncQueryBudgets.create_budget(int(data['limit']), user.id, category.id, month, year)
        await message.answer(f"–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ª—é–º–∏—Ç {data['limit']} —Ä—É–±–ª–µ–π –Ω–∞ '{data['category']}'", reply_markup=management)
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ‚ùó")

# -----------------------------------------–ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–Æ–ú–ò–¢–ê-----------------------------------------------------------------------------------------


@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ª—é–º–∏—Ç üö´')
async def settings(message: Message, state: FSMContext) -> None:
    await state.set_state(BudgetsForm.category)
    user = await AsyncQueryUser.get_user(message.from_user.id)
    month, year = datetime.datetime.now().month, datetime.datetime.now().year
    budgets = await AsyncQueryBudgets.universal_get_budgets(Budgets.user_id == user.id, Budgets.month == month, Budgets.year)
    for item in budgets:
        print(' ')
        print(item)
        print(' ')
    # await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", reply_markup=await reply_keyboard_builder_category(TransactionsType.expenses))



#----------------------------------------------------------------------------------------------------------------------------------------
@router.callback_query(F.data == 'back_transaction')
async def back(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == TransactionsForm.amount.state:
        await state.set_state(TransactionsForm.category)
        data = await state.get_data()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üìù", reply_markup=await reply_keyboard_builder_category(data['type']))
        await callback.message.edit_text('‚Ü© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=inline_back_transaction)
    elif current_state == TransactionsForm.category.state:
        await state.clear()
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìë", reply_markup=management)
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥')


@router.callback_query(F.data == 'back_limit')
async def back(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == BudgetsForm.limit.state:
        await state.set_state(BudgetsForm.category)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üìà", reply_markup=await reply_keyboard_builder_category(TransactionsType.expenses))
        await callback.message.answer('‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', reply_markup=inline_back_limite)
    elif current_state == BudgetsForm.category.state:
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=settings_reply_Keyboard)
        await callback.message.answer('‚Ü© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=inline_back_limite)

    else:
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìë", reply_markup=management)
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥')
