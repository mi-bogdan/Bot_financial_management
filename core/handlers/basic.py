from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from core.db.models import TransactionsType
from core.db.queries import (AsyncQueryCategory, AsyncQueryTransactions,
                             AsyncQueryUser)
from core.keyboards.reply import management, reply_keyboard_builder_category

router = Router()


class TransactionsForm(StatesGroup):
    category = State()
    amount = State()


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –ø–æ–º–æ–≥—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –±—é–¥–∂–µ—Ç–æ–º, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Ç—Å—Ä–∏—Ä—É–π—Ç–µ—Å—å /registration",
        reply_markup=management,
    )


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã üìâ")
async def cmd_start(message: Message, state: FSMContext) -> None:
    if await AsyncQueryUser.is_user(message.from_user.id):
        await state.set_state(TransactionsForm.category)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤",
            reply_markup=await reply_keyboard_builder_category(TransactionsType.income),
        )
    else:
        await message.answer("–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /registration")


@router.message(TransactionsForm.category)
async def form_category(message: Message, state: FSMContext) -> None:
    await state.update_data(category=message.text)
    await state.set_state(TransactionsForm.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Üì")


@router.message(TransactionsForm.amount)
async def form_amount(message: Message, state: FSMContext) -> None:
    if message.text.isdigit():
        await state.update_data(amount=message.text)
        data = await state.get_data()
        category = await AsyncQueryCategory.get_category_title_and_type(
            data["category"], TransactionsType.income
        )
        user_tg_id = message.from_user.id
        user = await AsyncQueryUser.get_user(user_tg_id)
        try:
            await AsyncQueryTransactions.create_transactions(
                int(data["amount"]),
                category.id,
                user.id,
            )
            await message.answer("–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∑–∞–ø–∏—Å–∞–ª üíµ", reply_markup=management)
        except:
            await message.answer(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ üòî",
                reply_markup=management,
            )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑ ‚Üì")


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã üìà")
async def cmd_start(message: Message, state: FSMContext) -> None:
    if await AsyncQueryUser.is_user(message.from_user.id):
        await state.set_state(TransactionsForm.category)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤",
            reply_markup=await reply_keyboard_builder_category(
                TransactionsType.expenses
            ),
        )
    else:
        await message.answer("–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /registration")
